/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.rapid.models

import com.expediagroup.sdk.core.model.exception.client.PropertyConstraintViolationException
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator
import javax.validation.Valid
import javax.validation.Validation

/**
 * To be used for collecting and sharing partner and client information with the supplier.
 * @param pointOfSaleDisplayToShare The name of the point of sale to be shared.
 * @param companyNameToShare The name of the company to be shared.
 * @param consentToShare Whether or not this info should be shared.
 */
data class SupplierTransparency(
    // The name of the point of sale to be shared.
    @JsonProperty("point_of_sale_display_to_share")
    @field:Valid
    val pointOfSaleDisplayToShare: kotlin.String? = null,
    // The name of the company to be shared.
    @JsonProperty("company_name_to_share")
    @field:Valid
    val companyNameToShare: kotlin.String? = null,
    // Whether or not this info should be shared.
    @JsonProperty("consent_to_share")
    @field:Valid
    val consentToShare: kotlin.Boolean? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var pointOfSaleDisplayToShare: kotlin.String? = null,
        private var companyNameToShare: kotlin.String? = null,
        private var consentToShare: kotlin.Boolean? = null
    ) {
        fun pointOfSaleDisplayToShare(pointOfSaleDisplayToShare: kotlin.String?) = apply { this.pointOfSaleDisplayToShare = pointOfSaleDisplayToShare }

        fun companyNameToShare(companyNameToShare: kotlin.String?) = apply { this.companyNameToShare = companyNameToShare }

        fun consentToShare(consentToShare: kotlin.Boolean?) = apply { this.consentToShare = consentToShare }

        fun build(): SupplierTransparency {
            val instance =
                SupplierTransparency(
                    pointOfSaleDisplayToShare = pointOfSaleDisplayToShare,
                    companyNameToShare = companyNameToShare,
                    consentToShare = consentToShare
                )

            validate(instance)

            return instance
        }

        private fun validate(instance: SupplierTransparency) {
            val validator =
                Validation
                    .byDefaultProvider()
                    .configure()
                    .messageInterpolator(ParameterMessageInterpolator())
                    .buildValidatorFactory()
                    .validator

            val violations = validator.validate(instance)

            if (violations.isNotEmpty()) {
                throw PropertyConstraintViolationException(
                    constraintViolations = violations.map { "${it.propertyPath}: ${it.message}" }
                )
            }
        }
    }

    fun toBuilder() =
        Builder(
            pointOfSaleDisplayToShare = pointOfSaleDisplayToShare,
            companyNameToShare = companyNameToShare,
            consentToShare = consentToShare
        )
}
