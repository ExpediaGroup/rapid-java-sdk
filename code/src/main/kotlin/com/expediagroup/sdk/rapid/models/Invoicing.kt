/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.rapid.models

import com.expediagroup.sdk.core.model.exception.client.PropertyConstraintViolationException
import com.expediagroup.sdk.rapid.models.Address1
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator
import javax.validation.Valid
import javax.validation.Validation

/**
 * To be included if invoicing is requested.
 * @param consentToShare Whether the partner and traveler consent to share the invoicing section information with the supplier and property. If not provided, this invoicing data will not be shared with the supplier or property.
 * @param companyName The traveler's company name to appear on the invoice.
 * @param companyAddress
 * @param pointOfSaleDisplay Provide this when a specific site or branding should be used on the invoice instead of partner name.
 * @param email Email address to send invoices
 * @param vatNumber A custom VAT number to include on invoices
 */
data class Invoicing(
    // Whether the partner and traveler consent to share the invoicing section information with the supplier and property. If not provided, this invoicing data will not be shared with the supplier or property.
    @JsonProperty("consent_to_share")
    @field:Valid
    val consentToShare: kotlin.Boolean? = null,
    // The traveler's company name to appear on the invoice.
    @JsonProperty("company_name")
    @field:Valid
    val companyName: kotlin.String? = null,
    @JsonProperty("company_address")
    @field:Valid
    val companyAddress: Address1? = null,
    // Provide this when a specific site or branding should be used on the invoice instead of partner name.
    @JsonProperty("point_of_sale_display")
    @field:Valid
    val pointOfSaleDisplay: kotlin.String? = null,
    // Email address to send invoices
    @JsonProperty("email")
    @field:Valid
    val email: kotlin.String? = null,
    // A custom VAT number to include on invoices
    @JsonProperty("vat_number")
    @field:Valid
    val vatNumber: kotlin.String? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var consentToShare: kotlin.Boolean? = null,
        private var companyName: kotlin.String? = null,
        private var companyAddress: Address1? = null,
        private var pointOfSaleDisplay: kotlin.String? = null,
        private var email: kotlin.String? = null,
        private var vatNumber: kotlin.String? = null
    ) {
        fun consentToShare(consentToShare: kotlin.Boolean?) = apply { this.consentToShare = consentToShare }

        fun companyName(companyName: kotlin.String?) = apply { this.companyName = companyName }

        fun companyAddress(companyAddress: Address1?) = apply { this.companyAddress = companyAddress }

        fun pointOfSaleDisplay(pointOfSaleDisplay: kotlin.String?) = apply { this.pointOfSaleDisplay = pointOfSaleDisplay }

        fun email(email: kotlin.String?) = apply { this.email = email }

        fun vatNumber(vatNumber: kotlin.String?) = apply { this.vatNumber = vatNumber }

        fun build(): Invoicing {
            val instance =
                Invoicing(
                    consentToShare = consentToShare,
                    companyName = companyName,
                    companyAddress = companyAddress,
                    pointOfSaleDisplay = pointOfSaleDisplay,
                    email = email,
                    vatNumber = vatNumber
                )

            validate(instance)

            return instance
        }

        private fun validate(instance: Invoicing) {
            val validator =
                Validation
                    .byDefaultProvider()
                    .configure()
                    .messageInterpolator(ParameterMessageInterpolator())
                    .buildValidatorFactory()
                    .validator

            val violations = validator.validate(instance)

            if (violations.isNotEmpty()) {
                throw PropertyConstraintViolationException(
                    constraintViolations = violations.map { "${it.propertyPath}: ${it.message}" }
                )
            }
        }
    }

    fun toBuilder() =
        Builder(
            consentToShare = consentToShare,
            companyName = companyName,
            companyAddress = companyAddress,
            pointOfSaleDisplay = pointOfSaleDisplay,
            email = email,
            vatNumber = vatNumber
        )
}
