/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.rapid.models

import com.expediagroup.sdk.core.model.exception.client.PropertyConstraintViolationException
import com.expediagroup.sdk.rapid.models.Beacons
import com.expediagroup.sdk.rapid.models.Creative
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator
import javax.validation.Valid
import javax.validation.Validation
import javax.validation.constraints.Min
import javax.validation.constraints.NotNull

/**
 * The sponsored listing which advertises a specific property.
 * @param rank The sponsored listing should adhere to the rank and not be re-ranked. This field is 0-based.
 * @param propertyId
 * @param beacons
 * @param creative
 * @param adTransparencyUrl The url used to retrieve digital services act information regarding why the ad was selected.
 */
data class SponsoredListing(
    // The sponsored listing should adhere to the rank and not be re-ranked. This field is 0-based.
    @JsonProperty("rank")
    @field:Min(0)
    @field:NotNull
    @field:Valid
    val rank: kotlin.Int,
    @JsonProperty("property_id")
    @field:NotNull
    @field:Valid
    val propertyId: kotlin.String,
    @JsonProperty("beacons")
    @field:NotNull
    @field:Valid
    val beacons: Beacons,
    @JsonProperty("creative")
    @field:Valid
    val creative: Creative? = null,
    // The url used to retrieve digital services act information regarding why the ad was selected.
    @JsonProperty("ad_transparency_url")
    @field:Valid
    val adTransparencyUrl: kotlin.String? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var rank: kotlin.Int? = null,
        private var propertyId: kotlin.String? = null,
        private var beacons: Beacons? = null,
        private var creative: Creative? = null,
        private var adTransparencyUrl: kotlin.String? = null
    ) {
        fun rank(rank: kotlin.Int) = apply { this.rank = rank }

        fun propertyId(propertyId: kotlin.String) = apply { this.propertyId = propertyId }

        fun beacons(beacons: Beacons) = apply { this.beacons = beacons }

        fun creative(creative: Creative?) = apply { this.creative = creative }

        fun adTransparencyUrl(adTransparencyUrl: kotlin.String?) = apply { this.adTransparencyUrl = adTransparencyUrl }

        fun build(): SponsoredListing {
            val instance =
                SponsoredListing(
                    rank = rank!!,
                    propertyId = propertyId!!,
                    beacons = beacons!!,
                    creative = creative,
                    adTransparencyUrl = adTransparencyUrl
                )

            validate(instance)

            return instance
        }

        private fun validate(instance: SponsoredListing) {
            val validator =
                Validation
                    .byDefaultProvider()
                    .configure()
                    .messageInterpolator(ParameterMessageInterpolator())
                    .buildValidatorFactory()
                    .validator

            val violations = validator.validate(instance)

            if (violations.isNotEmpty()) {
                throw PropertyConstraintViolationException(
                    constraintViolations = violations.map { "${it.propertyPath}: ${it.message}" }
                )
            }
        }
    }

    fun toBuilder() =
        Builder(
            rank = rank!!,
            propertyId = propertyId!!,
            beacons = beacons!!,
            creative = creative,
            adTransparencyUrl = adTransparencyUrl
        )
}
