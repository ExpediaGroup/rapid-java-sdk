/*
 * Copyright (C) 2022 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.expediagroup.sdk.rapid.models

import com.expediagroup.sdk.core.model.exception.client.PropertyConstraintViolationException
import com.expediagroup.sdk.rapid.models.GuestCounts
import com.expediagroup.sdk.rapid.models.PageType
import com.expediagroup.sdk.rapid.models.ProductLine
import com.expediagroup.sdk.rapid.models.SalesChannel
import com.expediagroup.sdk.rapid.models.SortType
import com.fasterxml.jackson.annotation.JsonProperty
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator
import javax.validation.Valid
import javax.validation.Validation
import javax.validation.constraints.NotNull
import javax.validation.constraints.Pattern

/**
 *
 * @param countryCode The country code of the traveler's point of sale, in ISO 3166-1 alpha-2 format.  This should represent the country where the shopping transaction is taking place. For more information see: https://www.iso.org/obp/ui/#search/code/
 * @param language Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes.  Use only ISO 639-1 alpha-2 language codes and ISO 3166-1 alpha-2 country codes.  See https://www.w3.org/International/articles/language-tags/  Language Options: https://developers.expediagroup.com/docs/rapid/resources/reference/language-options
 * @param salesChannel
 * @param pageType
 * @param searchProductLines The product lines the traveler is searching for. lodging indicates hotel_standalone. lodging and flight would indicate a lodging_package.
 * @param checkin Check-in date, in ISO 8601 format (YYYY-MM-DD).
 * @param checkout Check-out date, in ISO 8601 format (YYYY-MM-DD).
 * @param occupancies Each array item represents guests of one room.
 * @param propertyIds The list of property ids eligible for returning sponsored listings. These are the potential candidates that could be included in the auction.
 * @param sortType
 * @param focusedPropertyId The property id the ranking of ads should be based on. Examples of a focused property are a customer searching for a specific property and it being pinned to the top of a page or the property recommendation carousel based on the currently or previously viewed property. The focused_property_id itself will be excluded from the ranking.
 * @param experimentIds A list of experiment ids that can be used for testing different behavior. The ids can be associated with different tests ran by the publisher and are completely arbitrary. The experiment ids will be included reports back to the publisher.
 */
data class AdsRequest(
    // The country code of the traveler's point of sale, in ISO 3166-1 alpha-2 format.  This should represent the country where the shopping transaction is taking place. For more information see: https://www.iso.org/obp/ui/#search/code/
    @JsonProperty("country_code")
    @field:Pattern(regexp = "^[A-Z]{2}$")
    @field:NotNull
    @field:Valid
    val countryCode: kotlin.String,
    // Desired language for the response as a subset of BCP47 format that only uses hyphenated pairs of two-digit language and country codes.  Use only ISO 639-1 alpha-2 language codes and ISO 3166-1 alpha-2 country codes.  See https://www.w3.org/International/articles/language-tags/  Language Options: https://developers.expediagroup.com/docs/rapid/resources/reference/language-options
    @JsonProperty("language")
    @field:Pattern(regexp = "^[a-z]{2}-[A-Z]{2}$")
    @field:NotNull
    @field:Valid
    val language: kotlin.String,
    @JsonProperty("sales_channel")
    @field:NotNull
    @field:Valid
    val salesChannel: SalesChannel,
    @JsonProperty("page_type")
    @field:NotNull
    @field:Valid
    val pageType: PageType,
    // The product lines the traveler is searching for. lodging indicates hotel_standalone. lodging and flight would indicate a lodging_package.
    @JsonProperty("search_product_lines")
    @field:NotNull
    @field:Valid
    val searchProductLines: kotlin.collections
        .List<
            ProductLine
        >,
    // Check-in date, in ISO 8601 format (YYYY-MM-DD).
    @JsonProperty("checkin")
    @field:Pattern(regexp = "^\\d{4}-\\d{2}-\\d{2}$")
    @field:NotNull
    @field:Valid
    val checkin: kotlin.String,
    // Check-out date, in ISO 8601 format (YYYY-MM-DD).
    @JsonProperty("checkout")
    @field:Pattern(regexp = "^\\d{4}-\\d{2}-\\d{2}$")
    @field:NotNull
    @field:Valid
    val checkout: kotlin.String,
    // Each array item represents guests of one room.
    @JsonProperty("occupancies")
    @field:NotNull
    @field:Valid
    val occupancies: kotlin.collections
        .List<
            GuestCounts
        >,
    // The list of property ids eligible for returning sponsored listings. These are the potential candidates that could be included in the auction.
    @JsonProperty("property_ids")
    @field:NotNull
    @field:Valid
    val propertyIds: kotlin.collections
        .List<
            kotlin.String
        >,
    @JsonProperty("sort_type")
    @field:Valid
    val sortType: SortType? = null,
    // The property id the ranking of ads should be based on. Examples of a focused property are a customer searching for a specific property and it being pinned to the top of a page or the property recommendation carousel based on the currently or previously viewed property. The focused_property_id itself will be excluded from the ranking.
    @JsonProperty("focused_property_id")
    @field:Valid
    val focusedPropertyId: kotlin.String? = null,
    // A list of experiment ids that can be used for testing different behavior. The ids can be associated with different tests ran by the publisher and are completely arbitrary. The experiment ids will be included reports back to the publisher.
    @JsonProperty("experiment_ids")
    @field:Valid
    val experimentIds: kotlin.collections.List<kotlin.String>? = null
) {
    companion object {
        @JvmStatic
        fun builder() = Builder()
    }

    class Builder(
        private var countryCode: kotlin.String? = null,
        private var language: kotlin.String? = null,
        private var salesChannel: SalesChannel? = null,
        private var pageType: PageType? = null,
        private var searchProductLines: kotlin.collections.List<ProductLine>? = null,
        private var checkin: kotlin.String? = null,
        private var checkout: kotlin.String? = null,
        private var occupancies: kotlin.collections.List<GuestCounts>? = null,
        private var propertyIds: kotlin.collections.List<kotlin.String>? = null,
        private var sortType: SortType? = null,
        private var focusedPropertyId: kotlin.String? = null,
        private var experimentIds: kotlin.collections.List<kotlin.String>? = null
    ) {
        fun countryCode(countryCode: kotlin.String) = apply { this.countryCode = countryCode }

        fun language(language: kotlin.String) = apply { this.language = language }

        fun salesChannel(salesChannel: SalesChannel) = apply { this.salesChannel = salesChannel }

        fun pageType(pageType: PageType) = apply { this.pageType = pageType }

        fun searchProductLines(searchProductLines: kotlin.collections.List<ProductLine>) = apply { this.searchProductLines = searchProductLines }

        fun checkin(checkin: kotlin.String) = apply { this.checkin = checkin }

        fun checkout(checkout: kotlin.String) = apply { this.checkout = checkout }

        fun occupancies(occupancies: kotlin.collections.List<GuestCounts>) = apply { this.occupancies = occupancies }

        fun propertyIds(propertyIds: kotlin.collections.List<kotlin.String>) = apply { this.propertyIds = propertyIds }

        fun sortType(sortType: SortType?) = apply { this.sortType = sortType }

        fun focusedPropertyId(focusedPropertyId: kotlin.String?) = apply { this.focusedPropertyId = focusedPropertyId }

        fun experimentIds(experimentIds: kotlin.collections.List<kotlin.String>?) = apply { this.experimentIds = experimentIds }

        fun build(): AdsRequest {
            val instance =
                AdsRequest(
                    countryCode = countryCode!!,
                    language = language!!,
                    salesChannel = salesChannel!!,
                    pageType = pageType!!,
                    searchProductLines = searchProductLines!!,
                    checkin = checkin!!,
                    checkout = checkout!!,
                    occupancies = occupancies!!,
                    propertyIds = propertyIds!!,
                    sortType = sortType,
                    focusedPropertyId = focusedPropertyId,
                    experimentIds = experimentIds
                )

            validate(instance)

            return instance
        }

        private fun validate(instance: AdsRequest) {
            val validator =
                Validation
                    .byDefaultProvider()
                    .configure()
                    .messageInterpolator(ParameterMessageInterpolator())
                    .buildValidatorFactory()
                    .validator

            val violations = validator.validate(instance)

            if (violations.isNotEmpty()) {
                throw PropertyConstraintViolationException(
                    constraintViolations = violations.map { "${it.propertyPath}: ${it.message}" }
                )
            }
        }
    }

    fun toBuilder() =
        Builder(
            countryCode = countryCode!!,
            language = language!!,
            salesChannel = salesChannel!!,
            pageType = pageType!!,
            searchProductLines = searchProductLines!!,
            checkin = checkin!!,
            checkout = checkout!!,
            occupancies = occupancies!!,
            propertyIds = propertyIds!!,
            sortType = sortType,
            focusedPropertyId = focusedPropertyId,
            experimentIds = experimentIds
        )
}
